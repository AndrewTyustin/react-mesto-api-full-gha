{"ast":null,"code":"import apiFindings from \"./apiFindings\";\nclass Api {\n  constructor(_ref) {\n    let {\n      link,\n      headers\n    } = _ref;\n    this._link = link;\n    this._headers = headers;\n    this._credentials = 'include';\n  }\n  _processingServerResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`код ошибки: ${res.status}`);\n    }\n  }\n  getInitialCards() {\n    return fetch(`${this._link}cards`, {\n      headers: this._headers,\n      credentials: this._credentials\n    }).then(this._processingServerResponse);\n  }\n  addNewCard(name, link) {\n    return fetch(`${this._link}cards`, {\n      headers: this._headers,\n      credentials: this._credentials,\n      method: \"POST\",\n      body: JSON.stringify({\n        name,\n        link\n      })\n    }).then(this._processingServerResponse);\n  }\n  deleteCard(cardId) {\n    return fetch(`${this._link}cards/${cardId}`, {\n      headers: this._headers,\n      credentials: this._credentials,\n      method: \"DELETE\"\n    }).then(this._processingServerResponse);\n  }\n  getUserData() {\n    return fetch(`${this._link}users/me`, {\n      headers: this._headers,\n      credentials: this._credentials\n    }).then(this._processingServerResponse);\n  }\n  sendUserData(userName, userAbout) {\n    return fetch(`${this._link}users/me`, {\n      headers: this._headers,\n      credentials: this._credentials,\n      method: \"PATCH\",\n      body: JSON.stringify({\n        name: userName,\n        about: userAbout\n      })\n    }).then(this._processingServerResponse);\n  }\n  sendAvatarData(avatarLink) {\n    return fetch(`${this._link}users/me/avatar`, {\n      headers: this._headers,\n      credentials: this._credentials,\n      method: \"PATCH\",\n      body: JSON.stringify({\n        avatar: avatarLink.avatar\n      })\n    }).then(this._processingServerResponse);\n  }\n  changeLikeCardStatus(cardId, isLiked) {\n    if (isLiked) {\n      return fetch(`${this._link}cards/${cardId}/likes`, {\n        headers: this._headers,\n        credentials: this._credentials,\n        method: \"PUT\"\n      }).then(this._processingServerResponse);\n    } else {\n      return fetch(`${this._link}cards/${cardId}/likes`, {\n        headers: this._headers,\n        credentials: this._credentials,\n        method: \"DELETE\"\n      }).then(this._processingServerResponse);\n    }\n  }\n}\nconst apiConnect = new Api(apiFindings);\nexport default apiConnect;","map":{"version":3,"names":["apiFindings","Api","constructor","link","headers","_link","_headers","_credentials","_processingServerResponse","res","ok","json","Promise","reject","status","getInitialCards","fetch","credentials","then","addNewCard","name","method","body","JSON","stringify","deleteCard","cardId","getUserData","sendUserData","userName","userAbout","about","sendAvatarData","avatarLink","avatar","changeLikeCardStatus","isLiked","apiConnect"],"sources":["C:/Users/EPIX/Desktop/praktikum/react-mesto-api-full-gha/frontend/src/utils/Api.js"],"sourcesContent":["import apiFindings from \"./apiFindings\";\r\n\r\nclass Api {\r\n  constructor({ link, headers }) {\r\n    this._link = link;\r\n    this._headers = headers;\r\n    this._credentials = 'include';\r\n  }\r\n  _processingServerResponse(res) {\r\n    if (res.ok) {\r\n      return res.json();\r\n    } else {\r\n      return Promise.reject(`код ошибки: ${res.status}`);\r\n    }\r\n  }\r\n  getInitialCards() {\r\n    return fetch(`${this._link}cards`, {\r\n      headers: this._headers,\r\n      credentials: this._credentials\r\n    }).then(this._processingServerResponse);\r\n  }\r\n  addNewCard(name, link) {\r\n    return fetch(`${this._link}cards`, {\r\n      headers: this._headers,\r\n      credentials: this._credentials,\r\n      method: \"POST\",\r\n      body: JSON.stringify({ name, link }),\r\n    }).then(this._processingServerResponse);\r\n  }\r\n  deleteCard(cardId) {\r\n    return fetch(`${this._link}cards/${cardId}`, {\r\n      headers: this._headers,\r\n      credentials: this._credentials,\r\n      method: \"DELETE\",\r\n    }).then(this._processingServerResponse);\r\n  }\r\n  getUserData() {\r\n    return fetch(`${this._link}users/me`, {\r\n      headers: this._headers,\r\n      credentials: this._credentials,\r\n    }).then(this._processingServerResponse);\r\n  }\r\n  sendUserData(userName, userAbout) {\r\n    return fetch(`${this._link}users/me`, {\r\n      headers: this._headers,\r\n      credentials: this._credentials,\r\n      method: \"PATCH\",\r\n      body: JSON.stringify({ name: userName, about: userAbout }),\r\n    }).then(this._processingServerResponse);\r\n  }\r\n  sendAvatarData(avatarLink) {\r\n    return fetch(`${this._link}users/me/avatar`, {\r\n      headers: this._headers,\r\n      credentials: this._credentials,\r\n      method: \"PATCH\",\r\n      body: JSON.stringify({ avatar: avatarLink.avatar }),\r\n    }).then(this._processingServerResponse);\r\n  }\r\n  changeLikeCardStatus(cardId, isLiked) {\r\n    if (isLiked) {\r\n      return fetch(`${this._link}cards/${cardId}/likes`, {\r\n        headers: this._headers,\r\n        credentials: this._credentials,\r\n        method: \"PUT\",\r\n      }).then(this._processingServerResponse);\r\n    } else {\r\n      return fetch(`${this._link}cards/${cardId}/likes`, {\r\n        headers: this._headers,\r\n        credentials: this._credentials,\r\n        method: \"DELETE\",\r\n      }).then(this._processingServerResponse);\r\n    }\r\n  }\r\n}\r\n\r\nconst apiConnect = new Api(apiFindings);\r\nexport default apiConnect;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}